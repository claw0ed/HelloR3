p <- c(110, 120, 130, 140, 150)
c <- c(100, 105, 128, 115, 142)
plot(p, c, pch=20, col='red')
lm(c~p)
lm(c~p) # y=4.20 + 0.94x
abline(lm(c~p), col='blue')
# 회기보형 검증 및 적합도 파악
summary(pc_iq)
summary(pc_iq)
p <- c(110, 120, 130, 140, 150)
c <- c(100, 105, 128, 115, 142)
plot(p, c, pch=20, col='red')
lm(c~p) # y=4.20 + 0.94x
abline(lm(c~p), col='blue')
summary(pc_iq)
p <- c(110, 120, 130, 140, 150)
c <- c(100, 105, 128, 115, 142)
plot(p, c, pch=20, col='red')
lm(c~p) # y=4.20 + 0.94x
abline(lm(c~p), col='blue')
summary(pc_iq)
summary(pc_iq)
pc_iq <- lm(c~p) # y=4.20 + 0.94x
abline(lm(c~p), col='blue')
summary(pc_iq)
lm(c~p) # y=4.20 + 0.94x
pc_iq <- abline(lm(c~p), col='blue')
summary(pc_iq)
plot(p, c, pch=20, col='red')
pc_iq <- lm(c~p) # y=4.20 + 0.94x
abline(lm(c~p), col='blue')
summary(pc_iq)
predict(pc_iq, data.frame(c(117))) # 예측값 계
coef(pc_iq)
predict(pc_iq, data.frame(c(117))) # 예측값 계산
coef(pc_iq)
predict(pc_iq, data.frame(c(117))) # 예측값 계산
predict(pc_iq, data.frame(c(117,117,117,117,117))) # 예측값 계산
# 자동차 주행속도와 브레이크 제동거리간의 관계 파악
str(cars)
cars
# 자동차 주행속도와 브레이크 제동거리간의 관계 파악
str(cars)
cars
str(cars)
# 주행속도와 제동거리간 회귀식은?
pc_iq <- lm(speed~dist) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
# 주행속도와 제동거리간 회귀식은?
pc_iq <- lm(dist~speed) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
# 주행속도와 제동거리간 회귀식은?
pc_iq <- lm(dist~speed) # y=4.20 + 0.94x
# 주행속도와 제동거리간 회귀식은?
pc_iq <- lm(cars$dist~cars$speed) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
# 주행속도와 제동거리간 회귀식은?
pc_iq <- lm(cars$dist~cars$speed) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
# 주행속도와 제동거리간 회귀식은?
plot(cars$speed, ars$dist, pch=20, col='red')
pc_iq <- lm(cars$dist~cars$speed) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
# 주행속도와 제동거리간 회귀식은?
plot(cars$speed, ars$dist, pch=20, col='red')
# 주행속도와 제동거리간 회귀식은?
plot(cars$speed, ars$dist, pch=20, col='red')
# 주행속도와 제동거리간 회귀식은?
plot(cars$speed, cars$dist, pch=20, col='red')
pc_iq <- lm(cars$dist~cars$speed) # y=4.20 + 0.94x
abline(pc_iq, col='blue')
plot(cars$speed, cars$dist, pch=20, col='red')
# 주행속도와 제동거리간 회귀식은?
distsp <- lm(cars$dist~cars$speed) # y=4.20 + 0.94x
abline(distsp, col='blue')
# 주행속도와 제동거리간 회귀식은?
lm(cars$dist~cars$speed)
fitted(distsp) [100:101]
# 속도가 100km일때 제동거리 측정
-17.597 + 3.932 * 100
# 속도가 100km일때 제동거리 측정
-17.579 + 3.932 * 100
cars$dist
cars
-17.579 + 3.932 * 10
cars
summary(distsp)
# 놀이동산 만족도 여부 회귀분석
parks <- read.csv('c:/Java/놀이동산에 대한 만족도.csv')
attach(parks)
# 놀이기구ride와 전체만족도overall 사이 회귀분석
ovri <- lm(overall~ride)
# 놀이기구ride와 전체만족도overall 사이 회귀분석
ovri <- lm(parks$overall~parks$ride)
plot(parks$overall~parks$ride)
abline(ovri, col='blue')
ovri #y = -94.962 + 1.703x
# 회귀모형 검증 및 적합도 확인
# F검증
# p값
# R제곱
summary(ovri)
lm_park <- lm(overall~rides+games+clean)
summary(lm_park)
# 회귀식 : -131.67877 + 0.57798a + 0.26028b + 1.28381c
summary(lm_park)
lm_park <- lm(overall~rides+games+clean)
# 회귀식 : -131.67877 + 0.57798a + 0.26028b + 1.28381c
summary(lm_park)
# 회귀식 : -131.67877 + 0.57798a + 0.26028b + 1.28381c
summary(lm_park)
# p310
library(MASS)
head(Cars93)
attach(Cars93)
lm(Price~EngineSize+RPM+Weight, data=Cars93)
summary(lm(Price~EngineSize+RPM+Weight, data=Cars93))
cars
Cars93
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
View(collage)
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre_gra+rank,
famity='binomial')
glm_collage <- glm(admit~gre+gra+rank,
famity='binomial')
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gra+rank,
famity='binomial')
summary(glm_collage)
glm()
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gra+rank,
famity='binomial')
summary(glm_collage)
glm()
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gpa+rank,
famity='binomial')
summary(glm_collage)
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gpa+rank,
famity='binomial')
summary(glm_collage)
glm()
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gpa+rank,
famity='binomial')
summary(glm_collage)
glm_collage <- glm(admit~gre+gpa+rank,
family='binomial')
summary(glm_collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage$rank) # 1 ~ 4
str(collage$rank)
collage$rank <- as.factor(collage$rank)
str(collage$rank)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage) # 1 ~ 4
collage$rank <- as.factor(collage$rank)
str(collage)
str(collage$rank)
collage$rank <- as.factor(collage$rank)
str(collage)
# 다음의 시험점수와 순위로 해당 학교에 입학 가능여부 확인
# 입학여부, gre(대학졸업점수), gra(내신성적), 학교등급
# admin : 1 입학성공, 0 입학실패
collage <- read.csv('c:/Java/대학입학성적.csv')
str(collage)
# rank는 이산형 데이터이므로 범주형 변수로 변환
range(collage) # 1 ~ 4
str(collage$rank)
collage$rank <- as.factor(collage$rank)
str(collage)
# 회귀식 분석
attach(collage)
glm_collage <- glm(admit~gre+gpa+rank,
family='binomial')
summary(glm_collage)
library(MASS)
data(eurodist) # 유럽 21개 도시 강의 거리를 측정한 데이터
eurodist
# 각 도시정보를 2차원으로 정리
citydist <- cmdscale(eurodist)
citydist
citydist
# 도시 정보를 x, y로 맵핑
x <- citydist[, 1]
y <- citydist[, 2]
# 지도에 도시정보 출력
plot(x, y)
text(x, y, rownames(citydist), cex=0.8)
# 지도에 도시정보 출력
plot(x, y, type=n)
# 지도에 도시정보 출력
plot(x, y, type='n')
text(x, y, rownames(citydist), cex=0.8)
abline(v=0, h=0, lty=2, lwd=1.2)
# 지도에 도시정보 출력
plot(x, y, type='n')
text(x, y, rownames(citydist), cex=0.8, col='blue')
abline(v=0, h=0, lty=2, lwd=1.2)
# 도시 정보를 x, y로 맵핑
x <- citydist[, 1]
y <- -citydist[, 2] # 도시의 위치 반전
# 지도에 도시정보 출력
plot(x, y, type='n')
text(x, y, rownames(citydist), cex=0.8, col='blue')
abline(v=0, h=0, lty=2, lwd=1.2)
# 자동차에 대한 선호도 조사를 다차원척도법으로 분석
# 차량에 대한 호감도를 1-9사이의 점수로 평가
set.seed(5478993)
qmatrix <- matrix(sample(c(1:9), 25, replace=T),
nroe=5, ncol=5)
qmatrix <- matrix(sample(c(1:9), 25, replace=T),
nrow=5, ncol=5)
# 설문조사 내용을 난수로 만들어 행렬에 저장
car_names = c('케이12', '소나타3000', '제네시스',
'i75', 'BMK')
colnames(qmatrix) <- car_names
rownames(qmatrix) <- car_names
qmatrix
atri
qmatrix
qm <- cmdscale(qm)
qmatrix
qm <- dist(qmatrix)
qm <- cmdscale(qm)
plot(qm, type='p')
abline(h=0, col='red')
abline(v=0, col='blue')
eurodist
#
qmatrix <- matrix(rnorm(100), nrow=5)
dist(qmatrix)
#
qmatrix <- matrix(rnorm(100), nrow=5)
q <- dist(qmatrix)
q <- cmdscale(q)
plot(q, type='p')
abline(h=0, col='red')
abline(v=0, col='blue')
text(qm, c(rownames(qmatrix)))
qmatrix
qm <- dist(qmatrix)
qm <- cmdscale(qm)
plot(qm, type='p')
abline(h=0, col='red')
abline(v=0, col='blue')
text(qm, c(rownames(qmatrix)))
rownames(qmatrix) <- car_names
text(qm, c(rownames(qmatrix)))
# 자동차에 대한 선호도 조사를 다차원척도법으로 분석
# 차량에 대한 호감도를 1-9사이의 점수로 평가
set.seed(5478993)
qmatrix <- matrix(sample(c(1:9), 25, replace=T),
nrow=5, ncol=5)
# 설문조사 내용을 난수로 만들어 행렬에 저장
car_names = c('케이12', '소나타3000', '제네시스',
'i75', 'BMK')
colnames(qmatrix) <- car_names
rownames(qmatrix) <- car_names
qmatrix
qm <- dist(qmatrix)
qm <- cmdscale(qm)
plot(qm, type='p')
abline(h=0, col='red')
abline(v=0, col='blue')
text(qm, c(rownames(qmatrix)))
# 자동차에 대한 선호도 조사를 다차원척도법으로 분석
# 차량에 대한 호감도를 1-9사이의 점수로 평가
set.seed(5478993)
qmatrix <- matrix(sample(c(1:9), 25, replace=T),
nrow=5, ncol=5)
# 설문조사 내용을 난수로 만들어 행렬에 저장
car_names = c('케이12', '소나타3000', '제네시스',
'i75', 'BMK')
colnames(qmatrix) <- car_names
rownames(qmatrix) <- car_names
qmatrix
qm <- dist(qmatrix)
qm <- cmdscale(qm)
plot(qm, type='n') # type='p'
abline(h=0, col='red')
abline(v=0, col='blue')
text(qm, c(rownames(qmatrix)))
